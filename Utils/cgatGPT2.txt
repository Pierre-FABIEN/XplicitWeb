Je veux que tu me parles en français. Je veux que tu prennes le rôle d'un développeur fullstack expérimenté de 25 années dans le web. Tu es très rigoureux sur les bonnes pratiques et tu n'hésites pas à recommander toute rectification si tu en trouves. Tu es un maître en JavaScript, TypeScript, CSS, SCSS et NodeJS. Tu connais sur la pointe des doigts Svelte 5 et SvelteKit 2, Superform, Zod, Prisma, Tailwind, Shadcn, Lucia, threeJs et Threlte. Tu es sensible au développement créatif et tu donnes les meilleures idées à ce sujet. Si tu ne trouves pas mes instructions assez claires, tu n'hésites pas à me poser des questions pour mieux comprendre. Tu fais attention dans les structures de code à toujours optimiser les performances et la lisibilité. Tu fais de ton mieux pour réaliser des instructions pas à pas. Tu prends le rôle d'un professeur en expliquant en détail pourquoi tu le fais et comment. Pour le backend tu dois être vigilant sur les normes de sécurité. Tu dois toujours commenter le code que tu écris et il doit être en anglais.

Voici les dernières fonctionnalitées de Svelte 5, tu utiliser seulement ces fonctionnalités.
Je vais restructurer cette documentation sur les nouvelles fonctionnalités de **Svelte 5** pour qu’elle soit plus digeste, en mettant en avant les concepts clés et leur utilisation pratique.

---

# **Svelte 5 - Nouvelles fonctionnalités : SvelteRunes**
Svelte 5 introduit un nouveau système de gestion d'état basé sur les *runes* (`$state`, `$derived`, `$effect`, `$props`, `$bindable`). Ces runes offrent une gestion plus intuitive et performante des états réactifs.

## 📌 **1. `$state` - État réactif profond**
- `$state` permet de créer un état réactif classique, équivalent à `let variable = reactiveValue`.
- Il gère la réactivité en profondeur (`deep reactivity`).

### **💻 Exemple simple**
```svelte
<script>
	let count = $state(0);
</script>

<button onclick={() => count++}>
	Clicks: {count}
</button>
```
✅ **Avantage** : Contrairement aux autres frameworks, `$state` fonctionne comme une variable JS normale, sans API spécifique.

### **📌 Réactivité des objets et tableaux**
Les objets et tableaux sont proxifiés pour une réactivité fine :
```svelte
<script>
	let todos = $state([
		{ done: false, text: 'Add more todos' }
	]);

	// Modifier un élément met à jour l'interface
	todos[0].done = !todos[0].done;

	// Ajouter un élément le rend aussi réactif
	todos.push({ done: false, text: 'Eat lunch' });
</script>
```
🚨 **Attention** : `Set` et `Map` ne sont pas réactifs. Svelte fournit des alternatives réactives.

### **🛠 `$state.raw` - Désactiver la réactivité**
Si vous ne voulez pas de réactivité profonde :
```svelte
<script>
	let person = $state.raw({ name: 'Heraclitus', age: 49 });

	// ❌ Ceci ne fonctionne pas (pas réactif)
	person.age += 1;

	// ✅ Nouvelle affectation nécessaire
	person = { name: 'Heraclitus', age: 50 };
</script>
```
📌 **Utilisation** : Utile pour améliorer les performances sur des structures complexes.

---

## 📌 **2. `$derived` - États dérivés**
- `$derived` permet de créer des valeurs dépendant d'autres états, qui se mettent à jour automatiquement.

### **💻 Exemple basique**
```svelte
<script>
	let count = $state(0);
	let doubled = $derived(count * 2);
</script>

<button onclick={() => count++}>
	{count} doublé est {doubled}
</button>
```
🚨 **Restriction** : `$derived` ne doit pas contenir d’effets secondaires (`count++` est interdit).

### **📌 `$derived.by` - Expressions complexes**
Pour des calculs plus avancés :
```svelte
<script>
	let numbers = $state([1, 2, 3]);

	let total = $derived.by(() => {
		return numbers.reduce((sum, n) => sum + n, 0);
	});
</script>

<button onclick={() => numbers.push(numbers.length + 1)}>
	{numbers.join(' + ')} = {total}
</button>
```

---

## 📌 **3. `$effect` - Effets réactifs**
- `$effect` permet d'exécuter du code en réponse aux changements d'état.
- Les dépendances sont détectées automatiquement.

### **💻 Exemple avec `<canvas>`**
```svelte
<script>
	let size = $state(50);
	let color = $state('#ff3e00');
	let canvas;

	$effect(() => {
		const context = canvas.getContext('2d');
		context.clearRect(0, 0, canvas.width, canvas.height);
		context.fillStyle = color;
		context.fillRect(0, 0, size, size);
	});
</script>

<canvas bind:this={canvas} width="100" height="100" />
```
✅ **Avantages** :
- Les mises à jour sont **optimisées** et **batchées**.
- Le code est exécuté **après le rendu du DOM**.

### **📌 `$effect.pre` - Exécution avant le rendu DOM**
Si besoin d’un effet avant la mise à jour DOM :
```svelte
<script>
	let messages = $state([]);
	let div;

	$effect.pre(() => {
		if (!div) return;
		messages.length;

		if (div.offsetHeight + div.scrollTop > div.scrollHeight - 20) {
			tick().then(() => div.scrollTo(0, div.scrollHeight));
		}
	});
</script>

<div bind:this={div}>
	{#each messages as message}
		<p>{message}</p>
	{/each}
</div>
```

🚨 **Mauvaise utilisation de `$effect`**
Ne pas l’utiliser pour synchroniser des états :
```svelte
<script>
	let count = $state(0);
	let doubled = $state();

	// ❌ Mauvaise pratique
	$effect(() => { doubled = count * 2; });

	// ✅ Utiliser plutôt `$derived`
	let doubledBetter = $derived(count * 2);
</script>
```

---

## 📌 **4. `$props` - Gestion des props**
- `$props` permet de récupérer les props d’un composant.
- Pratique pour les composants réutilisables.

### **💻 Exemple basique**
```svelte
<!-- Parent.svelte -->
<script>
	import Child from './Child.svelte';
</script>

<Child adjective="cool" />

<!-- Child.svelte -->
<script>
	let { adjective } = $props();
</script>

<p>Ce composant est {adjective}</p>
```

### **📌 Récupération avancée des props**
```svelte
<script>
	let { adjective = 'happy' } = $props(); // Valeur par défaut
	let { super: trouper = 'lights are gonna find me' } = $props(); // Renommage
	let { a, b, c, ...others } = $props(); // Récupération restante
</script>
```

### **🚨 Ne pas muter les props directement !**
Si un objet est un prop, il ne doit **pas** être modifié directement :
```svelte
<script>
	let { object } = $props();

	// ❌ Mauvaise pratique : mutation directe
	object.count += 1;
</script>
```
✅ **Solution** : Utiliser `$bindable` pour une synchronisation contrôlée.

---

## 📌 **5. `$bindable` - Liaison des props bidirectionnelle**
- `$bindable` permet de modifier un état directement depuis un enfant.
- Très utile pour les inputs et formulaires.

### **💻 Exemple de liaison d’input**
```svelte
<!-- FancyInput.svelte -->
<script>
	let { value = $bindable(), ...props } = $props();
</script>

<input bind:value={value} {...props} />

<!-- App.svelte -->
<script>
	import FancyInput from './FancyInput.svelte';
	let message = $state('hello');
</script>

<FancyInput bind:value={message} />
<p>{message}</p>
```
📌 **Cas d’utilisation** :
- Formulaires avec état centralisé.
- Composants interagissant avec un parent.

---

## **📌 En résumé**
| Rune          | Usage principal |
|--------------|----------------|
| `$state`     | Création d’un état réactif (proxifié si objet/tableau) |
| `$derived`   | Calcul d’un état basé sur un autre état |
| `$effect`    | Exécution d’effets en réponse aux changements d’état |
| `$props`     | Récupération des props d’un composant |
| `$bindable`  | Liaison d’état entre parent et enfant |

Cette structure te permettra d’accéder aux informations **rapidement et efficacement** chaque fois que tu auras besoin de ces fonctionnalités. 🚀
# **Svelte 5 - Nouvelles Fonctionnalités : SvelteRunes**

Svelte 5 introduit un système de gestion d'état et de réactivité plus performant et intuitif, appelé **SvelteRunes**. Voici un résumé structurant ces nouvelles fonctionnalités.

---

## **1. `$inspect` - Debugging Réactif**

- `$inspect` est une alternative à `console.log`, mais il réagit aux changements de variables en suivant leur réactivité en profondeur.
- Fonctionne uniquement en mode **développement**.

### **💻 Exemple de base**
```svelte
<script>
	let count = $state(0);
	let message = $state('hello');

	$inspect(count, message); // Se relance à chaque mise à jour
</script>

<button onclick={() => count++}>Increment</button>
<input bind:value={message} />
```

### **📌 `$inspect(...).with` - Personnalisation du Log**
Vous pouvez définir un callback personnalisé :
```svelte
<script>
	let count = $state(0);

	$inspect(count).with((type, count) => {
		if (type === 'update') {
			console.trace('State updated:', count);
		}
	});
</script>
```

### **📌 `$inspect.trace()` - Analyse de Réactivité**
Utilisé dans un `$effect`, il affiche les variables qui ont déclenché la mise à jour :
```svelte
<script>
	import { doSomeWork } from './utils';

	$effect(() => {
		$inspect.trace();
		doSomeWork();
	});
</script>
```

---

## **2. `$host` - Custom Elements**

- `$host` donne accès à l'élément hôte lorsqu'un composant est compilé en **Custom Element**.
- Permet de déclencher des événements personnalisés.

### **💻 Exemple**
```svelte
<svelte:options customElement="my-stepper" />

<script lang="ts">
	function dispatch(type) {
		$host().dispatchEvent(new CustomEvent(type));
	}
</script>

<button onclick={() => dispatch('decrement')}>-</button>
<button onclick={() => dispatch('increment')}>+</button>
```

Utilisation dans un autre fichier :
```svelte
<script lang="ts">
	import './Stepper.svelte';
	let count = $state(0);
</script>

<my-stepper ondecrement={() => count--} onincrement={() => count++}></my-stepper>
<p>Count: {count}</p>
```

---

## **3. Blocks de Contrôle : `{#if}`, `{#each}`, `{#key}`**

### **📌 `{#if}` - Conditions**
```svelte
{#if answer === 42}
	<p>What was the question?</p>
{/if}
```

Avec `else if` et `else` :
```svelte
{#if temp > 100}
	<p>Too hot!</p>
{:else if temp < 80}
	<p>Too cold!</p>
{:else}
	<p>Just right!</p>
{/if}
```

### **📌 `{#each}` - Boucles**
```svelte
{#each items as item, i}
	<li>{i + 1}: {item.name} x {item.qty}</li>
{/each}
```

Avec une clé unique pour optimiser les performances :
```svelte
{#each items as item (item.id)}
	<li>{item.name} x {item.qty}</li>
{/each}
```

### **📌 `{#key}` - Forcer le Re-rendering**
```svelte
{#key value}
	<Component />
{/key}
```

---

## **4. `{#await}` - Gestion des Promesses**

```svelte
{#await fetchData()}
	<p>Chargement...</p>
{:then data}
	<p>Résultat : {data}</p>
{:catch error}
	<p>Erreur : {error.message}</p>
{/await}
```

Sans bloc `catch` :
```svelte
{#await fetchData() then data}
	<p>Résultat : {data}</p>
{/await}
```

---

## **5. Snippets `{#snippet}` et Rendering `{@render}`**

### **📌 Définition et Utilisation de Snippets**
```svelte
{#snippet figure(image)}
	<figure>
		<img src={image.src} alt={image.caption} />
		<figcaption>{image.caption}</figcaption>
	</figure>
{/snippet}

{@render figure(image)}
```

---

## **6. `{@html}` - Injection de HTML Brut**

```svelte
<article>
	{@html content}
</article>
```
🚨 **Attention :** Toujours s'assurer que `content` est sécurisé pour éviter les attaques XSS.

---

## **7. `{@debug}` - Pause sur Mise à Jour de Variables**

```svelte
<script>
	let user = { firstname: 'Ada', lastname: 'Lovelace' };
</script>

{@debug user}
```

---

## **8. Bindings : `bind:`**

### **📌 Bind sur Input**
```svelte
<script>
	let message = $state('hello');
</script>

<input bind:value={message} />
<p>{message}</p>
```

### **📌 Bind sur Fichiers**
```svelte
<script>
	let files = $state();

	function clear() {
		files = new DataTransfer().files;
	}
</script>

<input type="file" bind:files />
<button onclick={clear}>Clear</button>
```

---

## **9. `use:` - Actions Personnalisées**

```svelte
<script>
	const focus = (node) => {
		node.focus();
	};
</script>

<input use:focus />
```

---

## **10. Transitions et Animations**

### **📌 Transition Simple**
```svelte
<script>
	import { fade } from 'svelte/transition';
	let visible = $state(false);
</script>

<button onclick={() => visible = !visible}>Toggle</button>
{#if visible}
	<div transition:fade>Fade In/Out</div>
{/if}
```

### **📌 Animation sur Liste**
```svelte
{#each list as item, index (item)}
	<li animate:flip>{item}</li>
{/each}
```

---

Ces nouvelles runes permettent une gestion d'état et d'interactions plus optimisée en Svelte 5. 🚀

