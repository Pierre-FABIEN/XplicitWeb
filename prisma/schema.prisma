datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  CLIENT
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CANCELLED
}


// AUTH __________________________________________________________________________________
model User {
  id                        String                     @id @default(auto()) @map("_id") @db.ObjectId
  email                     String                     @unique
  username                  String?
  passwordHash              String?
  recoveryCode              String?
  emailVerified             Boolean                    @default(false)
  isMfaEnabled              Boolean                    @default(false)
  totpKey                   Bytes?
  googleId                  String?                    @unique
  name                      String?
  picture                   String?
  role                      Role                       @default(CLIENT)
  addresses                 Address[]
  orders                    Order[]
  transactions              Transaction[]
  sessions                  Session[]
  emailVerificationRequests EmailVerificationRequest[] @relation("UserEmailVerificationRequests")
  passwordResetSessions     PasswordResetSession[]     @relation("UserPasswordResetSessions")
  createdAt     DateTime @default(now())
}

model Session {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  user              User     @relation(fields: [userId], references: [id])
  userId            String   @db.ObjectId
  expiresAt         DateTime
  twoFactorVerified Boolean  @default(false)
  oauthProvider     String?
}

model EmailVerificationRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation("UserEmailVerificationRequests", fields: [userId], references: [id])
  userId    String   @db.ObjectId
  email     String
  code      String
  expiresAt DateTime
}

model PasswordResetSession {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  user              User     @relation("UserPasswordResetSessions", fields: [userId], references: [id])
  userId            String   @db.ObjectId
  email             String
  code              String
  expiresAt         DateTime
  emailVerified     Boolean  @default(false)
  twoFactorVerified Boolean  @default(false)
}



// COMMERCE __________________________________________________________________________________

model Address {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  recipient String
  street    String
  city      String
  state     String
  zip       String
  country   String
  userId    String? @db.ObjectId
  user      User?   @relation(fields: [userId], references: [id])
  orders    Order[]
  @@map("addresses")
}

model Order {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  userId        String            @db.ObjectId
  addressId     String?           @db.ObjectId  
  subtotal      Float             @default(0)
  tax           Float             @default(0)
  total         Float             @default(0)
  status        OrderStatus       @default(PENDING)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @default(now())
  items         OrderItem[]       

  shippingOption String?
  shippingCost    Float?

  user          User              @relation(fields: [userId], references: [id])
  address       Address?          @relation(fields: [addressId], references: [id])
  statusHistory OrderStatusHistory[]

  @@map("orders")
}


model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int
  price     Float
  custom    Custom[]

  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  @@map("order_items")
}

model OrderStatusHistory {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String      @db.ObjectId
  status    OrderStatus
  changedAt DateTime    @default(now())

  order     Order       @relation(fields: [orderId], references: [id])
  @@map("order_status_histories")
}

model Product {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  price        Float
  stock        Int
  images       String[]
  slug         String       @unique
  colorProduct String
  categories   ProductCategory[]
  orderItems   OrderItem[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  @@map("products")
}

model Custom {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  image       String   // URL de l'image personnalisée
  userMessage     String   // Message personnalisé
  orderItemId String   @db.ObjectId
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  @@map("customizations")
}

model Transaction {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  stripePaymentId        String   @unique
  orderId                String   @db.ObjectId
  userId                 String?  @db.ObjectId 
  amount                 Float
  currency               String

  customer_details_email String?  @default("")
  customer_details_name  String?  @default("")
  customer_details_phone String?  @default("")

  status                 String
  createdAt              DateTime @default(now())
  updatedAt              DateTime @default(now())

  shippingOption         String
  shippingCost           Float

  sendcloudParcelId      String? 
  trackingNumber         String? 
  trackingUrl            String? 

  app_user_name          String
  app_user_email         String
  app_user_recipient     String
  app_user_street        String
  app_user_city          String
  app_user_state         String
  app_user_zip           String
  app_user_country       String
  products               Json     

  user                   User?    @relation(fields: [userId], references: [id]) 
  @@map("transactions")
}

model ProductCategory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId
  categoryId  String   @db.ObjectId

  product     Product  @relation(fields: [productId], references: [id])
  category    Category @relation(fields: [categoryId], references: [id])
  @@map("product_categories")
}

model Category {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  products  ProductCategory[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())
  @@map("categories")
}





// BLOG __________________________________________________________________________________
model BlogPost {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  slug        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  published   Boolean      @default(false)
  author      BlogAuthor       @relation(fields: [authorId], references: [id])
  authorId    String       @db.ObjectId
  category    BlogCategory?    @relation(fields: [categoryId], references: [id])
  categoryId  String?          @db.ObjectId
  comments    BlogComment[]
  tags        BlogPostTag[]
}

model BlogAuthor {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  posts     BlogPost[]
  createdAt DateTime @default(now())
}

model BlogCategory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  posts       BlogPost[]
  createdAt   DateTime @default(now())
}

model BlogComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  author    String
  post      BlogPost     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model BlogTag {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  posts     BlogPostTag[]
  createdAt DateTime  @default(now())
}

model BlogPostTag {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  post   BlogPost   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
  tag    BlogTag    @relation(fields: [tagId], references: [id])
  tagId  String @db.ObjectId

  @@unique([postId, tagId]) 
}